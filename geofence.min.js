"use strict";const loadGoogleMaps=apiKey=>new Promise(((resolve,reject)=>{const script=document.createElement("script");script.src=`https://maps.googleapis.com/maps/api/js?key=${apiKey}&libraries=geometry`;script.defer=true;script.async=true;script.onload=()=>{if(window.google&&window.google.maps){resolve(window.google.maps)}else{reject(new Error("Google Maps API failed to load."))}};script.onerror=()=>reject(new Error("Failed to load Google Maps API."));document.head.appendChild(script)}));const geofenceCoordinates=[{lng:-149.9041557,lat:61.2190324},{lng:-149.8588371,lat:61.2187845},{lng:-149.8542023,lat:61.1877758},{lng:-149.9093056,lat:61.1876103},{lng:-149.9038124,lat:61.2191977}];const maxDistance=100;const isWithinGeofence=userLocation=>{const isWithin=geofenceCoordinates.every((coordinate=>{const distance=google.maps.geometry.spherical.computeDistanceBetween(new google.maps.LatLng(userLocation.lat,userLocation.lng),new google.maps.LatLng(coordinate.lat,coordinate.lng));console.log("Distance:",distance);return distance<=maxDistance}));return isWithin};const getUserLocation=()=>new Promise(((resolve,reject)=>{if(navigator.geolocation){navigator.geolocation.getCurrentPosition((position=>{const userLocation={lat:position.coords.latitude,lng:position.coords.longitude};resolve(userLocation)}),(error=>{reject(error)}))}else{reject("Geolocation is not supported by this browser.")}}));const apiKey="GOOGLE_API_KEY";loadGoogleMaps(apiKey).then((()=>{getUserLocation().then((userLocation=>{console.log("User location:",{userLocation:userLocation,geofenceCoordinates:geofenceCoordinates});const isInside=isWithinGeofence(userLocation);if(isInside){alert("You are within the valid zone.")}else{alert("your are outside the valid zone.")}})).catch((error=>{console.error("Error fetching user location:",error)}))})).catch((error=>{console.error("Error loading Google Maps:",error)}));